/*
 * This file is generated by jOOQ.
 */
package hub.bakdoolot.course_project.tables;


import hub.bakdoolot.course_project.Keys;
import hub.bakdoolot.course_project.Public;
import hub.bakdoolot.course_project.tables.AccountCourse.AccountCoursePath;
import hub.bakdoolot.course_project.tables.records.CourseRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Course extends TableImpl<CourseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.course</code>
     */
    public static final Course COURSE = new Course();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CourseRecord> getRecordType() {
        return CourseRecord.class;
    }

    /**
     * The column <code>public.course.id</code>.
     */
    public final TableField<CourseRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.course.name</code>.
     */
    public final TableField<CourseRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    private Course(Name alias, Table<CourseRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Course(Name alias, Table<CourseRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.course</code> table reference
     */
    public Course(String alias) {
        this(DSL.name(alias), COURSE);
    }

    /**
     * Create an aliased <code>public.course</code> table reference
     */
    public Course(Name alias) {
        this(alias, COURSE);
    }

    /**
     * Create a <code>public.course</code> table reference
     */
    public Course() {
        this(DSL.name("course"), null);
    }

    public <O extends Record> Course(Table<O> path, ForeignKey<O, CourseRecord> childPath, InverseForeignKey<O, CourseRecord> parentPath) {
        super(path, childPath, parentPath, COURSE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CoursePath extends Course implements Path<CourseRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CoursePath(Table<O> path, ForeignKey<O, CourseRecord> childPath, InverseForeignKey<O, CourseRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CoursePath(Name alias, Table<CourseRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CoursePath as(String alias) {
            return new CoursePath(DSL.name(alias), this);
        }

        @Override
        public CoursePath as(Name alias) {
            return new CoursePath(alias, this);
        }

        @Override
        public CoursePath as(Table<?> alias) {
            return new CoursePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<CourseRecord> getPrimaryKey() {
        return Keys.COURSE_PKEY;
    }

    private transient AccountCoursePath _accountCourse;

    /**
     * Get the implicit to-many join path to the
     * <code>public.account_course</code> table
     */
    public AccountCoursePath accountCourse() {
        if (_accountCourse == null)
            _accountCourse = new AccountCoursePath(this, null, Keys.ACCOUNT_COURSE__FKPL8YJ0DPGFX6Q27QAEQNP2LP3.getInverseKey());

        return _accountCourse;
    }

    @Override
    public Course as(String alias) {
        return new Course(DSL.name(alias), this);
    }

    @Override
    public Course as(Name alias) {
        return new Course(alias, this);
    }

    @Override
    public Course as(Table<?> alias) {
        return new Course(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Course rename(String name) {
        return new Course(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Course rename(Name name) {
        return new Course(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Course rename(Table<?> name) {
        return new Course(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Course where(Condition condition) {
        return new Course(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Course where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Course where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Course where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Course where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Course where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Course where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Course where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Course whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Course whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
