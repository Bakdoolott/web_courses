/*
 * This file is generated by jOOQ.
 */
package hub.bakdoolot.course_project.tables;


import hub.bakdoolot.course_project.Keys;
import hub.bakdoolot.course_project.Public;
import hub.bakdoolot.course_project.tables.AccountRating.AccountRatingPath;
import hub.bakdoolot.course_project.tables.records.RatingRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Rating extends TableImpl<RatingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.rating</code>
     */
    public static final Rating RATING = new Rating();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RatingRecord> getRecordType() {
        return RatingRecord.class;
    }

    /**
     * The column <code>public.rating.id</code>.
     */
    public final TableField<RatingRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.rating.rating_point</code>.
     */
    public final TableField<RatingRecord, String> RATING_POINT = createField(DSL.name("rating_point"), SQLDataType.VARCHAR(255), this, "");

    private Rating(Name alias, Table<RatingRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Rating(Name alias, Table<RatingRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.rating</code> table reference
     */
    public Rating(String alias) {
        this(DSL.name(alias), RATING);
    }

    /**
     * Create an aliased <code>public.rating</code> table reference
     */
    public Rating(Name alias) {
        this(alias, RATING);
    }

    /**
     * Create a <code>public.rating</code> table reference
     */
    public Rating() {
        this(DSL.name("rating"), null);
    }

    public <O extends Record> Rating(Table<O> path, ForeignKey<O, RatingRecord> childPath, InverseForeignKey<O, RatingRecord> parentPath) {
        super(path, childPath, parentPath, RATING);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RatingPath extends Rating implements Path<RatingRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> RatingPath(Table<O> path, ForeignKey<O, RatingRecord> childPath, InverseForeignKey<O, RatingRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RatingPath(Name alias, Table<RatingRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RatingPath as(String alias) {
            return new RatingPath(DSL.name(alias), this);
        }

        @Override
        public RatingPath as(Name alias) {
            return new RatingPath(alias, this);
        }

        @Override
        public RatingPath as(Table<?> alias) {
            return new RatingPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<RatingRecord> getPrimaryKey() {
        return Keys.RATING_PKEY;
    }

    private transient AccountRatingPath _accountRating;

    /**
     * Get the implicit to-many join path to the
     * <code>public.account_rating</code> table
     */
    public AccountRatingPath accountRating() {
        if (_accountRating == null)
            _accountRating = new AccountRatingPath(this, null, Keys.ACCOUNT_RATING__FKQ9IUIOQ3FRQTVCU4K7YBT0W1O.getInverseKey());

        return _accountRating;
    }

    @Override
    public Rating as(String alias) {
        return new Rating(DSL.name(alias), this);
    }

    @Override
    public Rating as(Name alias) {
        return new Rating(alias, this);
    }

    @Override
    public Rating as(Table<?> alias) {
        return new Rating(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rating rename(String name) {
        return new Rating(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rating rename(Name name) {
        return new Rating(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rating rename(Table<?> name) {
        return new Rating(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rating where(Condition condition) {
        return new Rating(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rating where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rating where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rating where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Rating where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Rating where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Rating where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Rating where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rating whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Rating whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
