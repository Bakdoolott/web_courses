/*
 * This file is generated by jOOQ.
 */
package hub.bakdoolot.course_project.tables;


import hub.bakdoolot.course_project.Keys;
import hub.bakdoolot.course_project.Public;
import hub.bakdoolot.course_project.tables.UserAccount.UserAccountPath;
import hub.bakdoolot.course_project.tables.Video.VideoPath;
import hub.bakdoolot.course_project.tables.records.TbLikeRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TbLike extends TableImpl<TbLikeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tb_like</code>
     */
    public static final TbLike TB_LIKE = new TbLike();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TbLikeRecord> getRecordType() {
        return TbLikeRecord.class;
    }

    /**
     * The column <code>public.tb_like.id</code>.
     */
    public final TableField<TbLikeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.tb_like.id_account</code>.
     */
    public final TableField<TbLikeRecord, Long> ID_ACCOUNT = createField(DSL.name("id_account"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.tb_like.id_video</code>.
     */
    public final TableField<TbLikeRecord, Long> ID_VIDEO = createField(DSL.name("id_video"), SQLDataType.BIGINT, this, "");

    private TbLike(Name alias, Table<TbLikeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TbLike(Name alias, Table<TbLikeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.tb_like</code> table reference
     */
    public TbLike(String alias) {
        this(DSL.name(alias), TB_LIKE);
    }

    /**
     * Create an aliased <code>public.tb_like</code> table reference
     */
    public TbLike(Name alias) {
        this(alias, TB_LIKE);
    }

    /**
     * Create a <code>public.tb_like</code> table reference
     */
    public TbLike() {
        this(DSL.name("tb_like"), null);
    }

    public <O extends Record> TbLike(Table<O> path, ForeignKey<O, TbLikeRecord> childPath, InverseForeignKey<O, TbLikeRecord> parentPath) {
        super(path, childPath, parentPath, TB_LIKE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TbLikePath extends TbLike implements Path<TbLikeRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TbLikePath(Table<O> path, ForeignKey<O, TbLikeRecord> childPath, InverseForeignKey<O, TbLikeRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TbLikePath(Name alias, Table<TbLikeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TbLikePath as(String alias) {
            return new TbLikePath(DSL.name(alias), this);
        }

        @Override
        public TbLikePath as(Name alias) {
            return new TbLikePath(alias, this);
        }

        @Override
        public TbLikePath as(Table<?> alias) {
            return new TbLikePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TbLikeRecord> getPrimaryKey() {
        return Keys.TB_LIKE_PKEY;
    }

    @Override
    public List<ForeignKey<TbLikeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TB_LIKE__FKJCVCCSKTM0B5AEUWIR1G01XPH, Keys.TB_LIKE__FKT3W1U0JTEU6PIV1Y1CTPQR8VW);
    }

    private transient UserAccountPath _userAccount;

    /**
     * Get the implicit join path to the <code>public.user_account</code> table.
     */
    public UserAccountPath userAccount() {
        if (_userAccount == null)
            _userAccount = new UserAccountPath(this, Keys.TB_LIKE__FKJCVCCSKTM0B5AEUWIR1G01XPH, null);

        return _userAccount;
    }

    private transient VideoPath _video;

    /**
     * Get the implicit join path to the <code>public.video</code> table.
     */
    public VideoPath video() {
        if (_video == null)
            _video = new VideoPath(this, Keys.TB_LIKE__FKT3W1U0JTEU6PIV1Y1CTPQR8VW, null);

        return _video;
    }

    @Override
    public TbLike as(String alias) {
        return new TbLike(DSL.name(alias), this);
    }

    @Override
    public TbLike as(Name alias) {
        return new TbLike(alias, this);
    }

    @Override
    public TbLike as(Table<?> alias) {
        return new TbLike(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TbLike rename(String name) {
        return new TbLike(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TbLike rename(Name name) {
        return new TbLike(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TbLike rename(Table<?> name) {
        return new TbLike(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TbLike where(Condition condition) {
        return new TbLike(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TbLike where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TbLike where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TbLike where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TbLike where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TbLike where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TbLike where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TbLike where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TbLike whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TbLike whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
