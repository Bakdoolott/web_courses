/*
 * This file is generated by jOOQ.
 */
package hub.bakdoolot.course_project.tables;


import hub.bakdoolot.course_project.Keys;
import hub.bakdoolot.course_project.Public;
import hub.bakdoolot.course_project.tables.AccountCourse.AccountCoursePath;
import hub.bakdoolot.course_project.tables.AccountRating.AccountRatingPath;
import hub.bakdoolot.course_project.tables.Playlist.PlaylistPath;
import hub.bakdoolot.course_project.tables.TbLike.TbLikePath;
import hub.bakdoolot.course_project.tables.Users.UsersPath;
import hub.bakdoolot.course_project.tables.Video.VideoPath;
import hub.bakdoolot.course_project.tables.records.UserAccountRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserAccount extends TableImpl<UserAccountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_account</code>
     */
    public static final UserAccount USER_ACCOUNT = new UserAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserAccountRecord> getRecordType() {
        return UserAccountRecord.class;
    }

    /**
     * The column <code>public.user_account.id</code>.
     */
    public final TableField<UserAccountRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_account.email</code>.
     */
    public final TableField<UserAccountRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.user_account.password</code>.
     */
    public final TableField<UserAccountRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.user_account.phone_number</code>.
     */
    public final TableField<UserAccountRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.user_account.role</code>.
     */
    public final TableField<UserAccountRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.user_account.status</code>.
     */
    public final TableField<UserAccountRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    private UserAccount(Name alias, Table<UserAccountRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UserAccount(Name alias, Table<UserAccountRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.user_account</code> table reference
     */
    public UserAccount(String alias) {
        this(DSL.name(alias), USER_ACCOUNT);
    }

    /**
     * Create an aliased <code>public.user_account</code> table reference
     */
    public UserAccount(Name alias) {
        this(alias, USER_ACCOUNT);
    }

    /**
     * Create a <code>public.user_account</code> table reference
     */
    public UserAccount() {
        this(DSL.name("user_account"), null);
    }

    public <O extends Record> UserAccount(Table<O> path, ForeignKey<O, UserAccountRecord> childPath, InverseForeignKey<O, UserAccountRecord> parentPath) {
        super(path, childPath, parentPath, USER_ACCOUNT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UserAccountPath extends UserAccount implements Path<UserAccountRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UserAccountPath(Table<O> path, ForeignKey<O, UserAccountRecord> childPath, InverseForeignKey<O, UserAccountRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserAccountPath(Name alias, Table<UserAccountRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserAccountPath as(String alias) {
            return new UserAccountPath(DSL.name(alias), this);
        }

        @Override
        public UserAccountPath as(Name alias) {
            return new UserAccountPath(alias, this);
        }

        @Override
        public UserAccountPath as(Table<?> alias) {
            return new UserAccountPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserAccountRecord> getPrimaryKey() {
        return Keys.USER_ACCOUNT_PKEY;
    }

    private transient AccountCoursePath _accountCourse;

    /**
     * Get the implicit to-many join path to the
     * <code>public.account_course</code> table
     */
    public AccountCoursePath accountCourse() {
        if (_accountCourse == null)
            _accountCourse = new AccountCoursePath(this, null, Keys.ACCOUNT_COURSE__FK55HUILPTN1UXKV6MS5LUMH21T.getInverseKey());

        return _accountCourse;
    }

    private transient TbLikePath _tbLike;

    /**
     * Get the implicit to-many join path to the <code>public.tb_like</code>
     * table
     */
    public TbLikePath tbLike() {
        if (_tbLike == null)
            _tbLike = new TbLikePath(this, null, Keys.TB_LIKE__FKJCVCCSKTM0B5AEUWIR1G01XPH.getInverseKey());

        return _tbLike;
    }

    private transient UsersPath _users;

    /**
     * Get the implicit to-many join path to the <code>public.users</code> table
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, null, Keys.USERS__FKJUFG4PSSCKH87O76NF7Y52GRA.getInverseKey());

        return _users;
    }

    private transient PlaylistPath _playlist;

    /**
     * Get the implicit to-many join path to the <code>public.playlist</code>
     * table
     */
    public PlaylistPath playlist() {
        if (_playlist == null)
            _playlist = new PlaylistPath(this, null, Keys.PLAYLIST__FKLAD3BXY6MLCF07CQRN8L4EO24.getInverseKey());

        return _playlist;
    }

    private transient VideoPath _video;

    /**
     * Get the implicit to-many join path to the <code>public.video</code> table
     */
    public VideoPath video() {
        if (_video == null)
            _video = new VideoPath(this, null, Keys.VIDEO__FKPOK81KP9SJ5A1O8P714N8NP8Y.getInverseKey());

        return _video;
    }

    private transient AccountRatingPath _accountRating;

    /**
     * Get the implicit to-many join path to the
     * <code>public.account_rating</code> table
     */
    public AccountRatingPath accountRating() {
        if (_accountRating == null)
            _accountRating = new AccountRatingPath(this, null, Keys.ACCOUNT_RATING__FKT9SOKTKNM51CEPP6H0K0ON12O.getInverseKey());

        return _accountRating;
    }

    @Override
    public UserAccount as(String alias) {
        return new UserAccount(DSL.name(alias), this);
    }

    @Override
    public UserAccount as(Name alias) {
        return new UserAccount(alias, this);
    }

    @Override
    public UserAccount as(Table<?> alias) {
        return new UserAccount(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAccount rename(String name) {
        return new UserAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAccount rename(Name name) {
        return new UserAccount(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAccount rename(Table<?> name) {
        return new UserAccount(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserAccount where(Condition condition) {
        return new UserAccount(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserAccount where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserAccount where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserAccount where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserAccount where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserAccount where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserAccount where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserAccount where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserAccount whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserAccount whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
