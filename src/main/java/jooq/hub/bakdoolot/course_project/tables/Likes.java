/*
 * This file is generated by jOOQ.
 */
package hub.bakdoolot.course_project.tables;


import hub.bakdoolot.course_project.Keys;
import hub.bakdoolot.course_project.Public;
import hub.bakdoolot.course_project.tables.records.LikesRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Likes extends TableImpl<LikesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.likes</code>
     */
    public static final Likes LIKES = new Likes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LikesRecord> getRecordType() {
        return LikesRecord.class;
    }

    /**
     * The column <code>public.likes.id</code>.
     */
    public final TableField<LikesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.likes.id_account</code>.
     */
    public final TableField<LikesRecord, Long> ID_ACCOUNT = createField(DSL.name("id_account"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.likes.id_video</code>.
     */
    public final TableField<LikesRecord, Long> ID_VIDEO = createField(DSL.name("id_video"), SQLDataType.BIGINT, this, "");

    private Likes(Name alias, Table<LikesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Likes(Name alias, Table<LikesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.likes</code> table reference
     */
    public Likes(String alias) {
        this(DSL.name(alias), LIKES);
    }

    /**
     * Create an aliased <code>public.likes</code> table reference
     */
    public Likes(Name alias) {
        this(alias, LIKES);
    }

    /**
     * Create a <code>public.likes</code> table reference
     */
    public Likes() {
        this(DSL.name("likes"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<LikesRecord> getPrimaryKey() {
        return Keys.LIKES_PKEY;
    }

    @Override
    public Likes as(String alias) {
        return new Likes(DSL.name(alias), this);
    }

    @Override
    public Likes as(Name alias) {
        return new Likes(alias, this);
    }

    @Override
    public Likes as(Table<?> alias) {
        return new Likes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Likes rename(String name) {
        return new Likes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Likes rename(Name name) {
        return new Likes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Likes rename(Table<?> name) {
        return new Likes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Likes where(Condition condition) {
        return new Likes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Likes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Likes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Likes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Likes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Likes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Likes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Likes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Likes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Likes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
