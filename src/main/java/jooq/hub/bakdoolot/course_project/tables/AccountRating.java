/*
 * This file is generated by jOOQ.
 */
package hub.bakdoolot.course_project.tables;


import hub.bakdoolot.course_project.Keys;
import hub.bakdoolot.course_project.Public;
import hub.bakdoolot.course_project.tables.Rating.RatingPath;
import hub.bakdoolot.course_project.tables.UserAccount.UserAccountPath;
import hub.bakdoolot.course_project.tables.records.AccountRatingRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AccountRating extends TableImpl<AccountRatingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.account_rating</code>
     */
    public static final AccountRating ACCOUNT_RATING = new AccountRating();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountRatingRecord> getRecordType() {
        return AccountRatingRecord.class;
    }

    /**
     * The column <code>public.account_rating.id</code>.
     */
    public final TableField<AccountRatingRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.account_rating.id_rating</code>.
     */
    public final TableField<AccountRatingRecord, Long> ID_RATING = createField(DSL.name("id_rating"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.account_rating.id_account</code>.
     */
    public final TableField<AccountRatingRecord, Long> ID_ACCOUNT = createField(DSL.name("id_account"), SQLDataType.BIGINT, this, "");

    private AccountRating(Name alias, Table<AccountRatingRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AccountRating(Name alias, Table<AccountRatingRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.account_rating</code> table reference
     */
    public AccountRating(String alias) {
        this(DSL.name(alias), ACCOUNT_RATING);
    }

    /**
     * Create an aliased <code>public.account_rating</code> table reference
     */
    public AccountRating(Name alias) {
        this(alias, ACCOUNT_RATING);
    }

    /**
     * Create a <code>public.account_rating</code> table reference
     */
    public AccountRating() {
        this(DSL.name("account_rating"), null);
    }

    public <O extends Record> AccountRating(Table<O> path, ForeignKey<O, AccountRatingRecord> childPath, InverseForeignKey<O, AccountRatingRecord> parentPath) {
        super(path, childPath, parentPath, ACCOUNT_RATING);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AccountRatingPath extends AccountRating implements Path<AccountRatingRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> AccountRatingPath(Table<O> path, ForeignKey<O, AccountRatingRecord> childPath, InverseForeignKey<O, AccountRatingRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AccountRatingPath(Name alias, Table<AccountRatingRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AccountRatingPath as(String alias) {
            return new AccountRatingPath(DSL.name(alias), this);
        }

        @Override
        public AccountRatingPath as(Name alias) {
            return new AccountRatingPath(alias, this);
        }

        @Override
        public AccountRatingPath as(Table<?> alias) {
            return new AccountRatingPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AccountRatingRecord> getPrimaryKey() {
        return Keys.ACCOUNT_RATING_PKEY;
    }

    @Override
    public List<ForeignKey<AccountRatingRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACCOUNT_RATING__FKQ9IUIOQ3FRQTVCU4K7YBT0W1O, Keys.ACCOUNT_RATING__FKT9SOKTKNM51CEPP6H0K0ON12O);
    }

    private transient RatingPath _rating;

    /**
     * Get the implicit join path to the <code>public.rating</code> table.
     */
    public RatingPath rating() {
        if (_rating == null)
            _rating = new RatingPath(this, Keys.ACCOUNT_RATING__FKQ9IUIOQ3FRQTVCU4K7YBT0W1O, null);

        return _rating;
    }

    private transient UserAccountPath _userAccount;

    /**
     * Get the implicit join path to the <code>public.user_account</code> table.
     */
    public UserAccountPath userAccount() {
        if (_userAccount == null)
            _userAccount = new UserAccountPath(this, Keys.ACCOUNT_RATING__FKT9SOKTKNM51CEPP6H0K0ON12O, null);

        return _userAccount;
    }

    @Override
    public AccountRating as(String alias) {
        return new AccountRating(DSL.name(alias), this);
    }

    @Override
    public AccountRating as(Name alias) {
        return new AccountRating(alias, this);
    }

    @Override
    public AccountRating as(Table<?> alias) {
        return new AccountRating(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountRating rename(String name) {
        return new AccountRating(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountRating rename(Name name) {
        return new AccountRating(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountRating rename(Table<?> name) {
        return new AccountRating(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountRating where(Condition condition) {
        return new AccountRating(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountRating where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountRating where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountRating where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AccountRating where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AccountRating where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AccountRating where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AccountRating where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountRating whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AccountRating whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
